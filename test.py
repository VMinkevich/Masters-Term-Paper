import numpy as np
import matplotlib.pyplot as plt
import json

# Example of using json
# # some JSON:
# x =  '{ "name":"John", "age":30, "city":"New York"}'

# # parse x:
# y = json.loads(x)

# # the result is a Python dictionary:
# print(y["age"])

# toDo: переписать функцию getOptPrice так, чтобы она принимала на вход параметры из json файла
# Параметры для электроэнергии
# config = {    
#     'S0_energy': 50  # начальная цена электроэнергии (€/MWh)
#     'K': 55          # страйк цена (€/MWh)
#     'T': 1            # время до истечения опциона (в годах)
#     'r': 0.02         # безрисковая процентная ставка
#     'sigma_energy': 0.3  # волатильность электроэнергии
#     'mu_jump_energy': -0.1  # средний размер скачка для электроэнергии
#     'sigma_jump_energy': 0.2  # волатильность скачка электроэнергии
# }

# toDO: добавить аргумент в функцию getOptPrice, который будет принимать на вход путь к json файлу
def getOptPrice():

    # Параметры для электроэнергии
    S0_energy = 50  # начальная цена электроэнергии (€/MWh)
    K = 55          # страйк цена (€/MWh)
    T = 1            # время до истечения опциона (в годах)
    r = 0.02         # безрисковая процентная ставка
    sigma_energy = 0.3  # волатильность электроэнергии
    mu_jump_energy = -0.1  # средний размер скачка для электроэнергии
    sigma_jump_energy = 0.2  # волатильность скачка электроэнергии

    # Параметры для топлива
    S0_fuel = 40  # начальная цена топлива (€/мегаджоули)
    sigma_fuel = 0.4  # волатильность топлива
    mu_jump_fuel = -0.05  # средний размер скачка для топлива
    sigma_jump_fuel = 0.15  # волатильность скачка топлива

    # Корреляция между ценами на электроэнергию и топливо
    rho = 0.5  # корреляция между процессами (между ценами на электроэнергию и топливо)

    # Количество симуляций и шагов
    N = 100000  # количество симуляций
    M = 252  # количество временных шагов (например, для дневной дискретизации)
    dt = T / M  # шаг времени

    # Симуляция случайных процессов с учетом скачков
    np.random.seed(42)  # для воспроизводимости

    # Создаем массивы для цен на электроэнергию и топливо
    S_energy = np.zeros((N, M+1))
    S_fuel = np.zeros((N, M+1))

    S_energy[:, 0] = S0_energy
    S_fuel[:, 0] = S0_fuel

    # Генерация случайных траекторий с учетом скачков и корреляции
    for i in range(1, M + 1):
        # Случайные величины для нормальных процессов
        Z_energy = np.random.normal(0, 1, N)  # случайные нормальные величины для электроэнергии
        Z_fuel = np.random.normal(0, 1, N)  # случайные нормальные величины для топлива
        
        # Моделируем корреляцию между электроэнергией и топливом
        Z_fuel = rho * Z_energy + np.sqrt(1 - rho**2) * Z_fuel
        
        # Скачки для процессов
        J_energy = np.random.normal(mu_jump_energy, sigma_jump_energy, N)  # скачки для электроэнергии
        J_fuel = np.random.normal(mu_jump_fuel, sigma_jump_fuel, N)  # скачки для топлива
        
        # Обновление цен для электроэнергии и топлива с использованием модели Jump Diffusion
        S_energy[:, i] = S_energy[:, i-1] * np.exp((r - 0.5 * sigma_energy**2) * dt + sigma_energy * np.sqrt(dt) * Z_energy + J_energy)
        S_fuel[:, i] = S_fuel[:, i-1] * np.exp((r - 0.5 * sigma_fuel**2) * dt + sigma_fuel * np.sqrt(dt) * Z_fuel + J_fuel)

    # Оценка стоимости опциона (европейский call для электроэнергии)
    payoffs = np.maximum(S_energy[:, -1] - K, 0)  # прибыль от опциона на момент T
    option_price = np.exp(-r * T) * np.mean(payoffs)  # дисконтированная стоимость опциона

    # Результат
    print(f"Цена опциона на электроэнергию методом Монте-Карло с учетом модели с скачками и корреляции с ценами на топливо: {option_price:.2f} €/MWh")
    
    # Визуализация некоторых траекторий для проверки
    plt.figure(figsize=(10, 6))
    plt.plot(S_energy[0:40, :].T, lw=1)
    plt.title('Некоторые траектории цен на электроэнергию')
    plt.xlabel('Время (дни)')
    plt.ylabel('Цена (€/MWh)')
    plt.show()

if __name__ == "__main__":
    getOptPrice()
